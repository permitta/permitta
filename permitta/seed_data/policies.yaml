- name: Super User Account
  description: Super user has access to do anything within the platform
  policy_type: DSL
  author: system
  publisher: system
  status: Published
  policy_dsl: |-
    allow if {
      input_principal_name == "admin"
    }
    principal_has_access_to_column(attributes) if {
      input_principal_name == "admin"
    }

- name: Internal User Account
  description: Internal admin user has access to do anything within the platform
  policy_type: DSL
  author: system
  publisher: system
  status: Pending Delete
  policy_dsl: |-
    allow if {
      input_principal_name == "internal_admin"
    }

- name: External User Account
  description: External user has access to do anything within the platform (disabled)
  policy_type: DSL
  author: system
  publisher: system
  status: Disabled
  policy_dsl: |-
    allow if {
      input_principal_name == "external_admin"
    }

- name: Global ABAC
  description: Global policy to allow access to objects which match the attributes or principals
  policy_type: DSL
  author: alice
  publisher: system
  status: Published
  policy_dsl: |-
    
    # global policy - if all object tags are on the principal, then allow
    all_object_attrs_exist_on_principal if {
      # ensure all attrs on object exist on principal
      every data_object_attribute in data_object_attributes {
        some principal_attribute in principal_attributes
        data_object_attribute == principal_attribute
      }
    }

- name: Sales & Marketing Analysts
  description: Sales analysts have access to Commercial sales and marketing data
  policy_type: Builder
  action_group: read
  author: alice
  publisher: system
  status: Published
  principal_attributes:
    - key: Sales
      value: Commercial
  object_attributes:
    - key: Marketing
      value: Commercial

- name: IT Directors
  description: IT directors with access to IT privacy can see objects which are both sales and marketing privacy
  policy_type: Builder
  action_group: read
  author: alice
  publisher: system
  status: Published
  principal_attributes:
    - key: IT
      value: Restricted
  object_attributes:
    - key: Sales
      value: Privacy
    - key: Marketing
      value: Privacy

- name: API User impersonation
  description: This policy allows the API user to impersonate any other user
  policy_type: DSL
  author: alice
  status: Draft
  policy_dsl: |-
    allow if {
      input_principal_name == "api"
      action == "ImpersonateUser"
    }

- name: Developers
  description: Allows developers to perform DDL and write operations on iceberg.workspace schema with v_ and u_ table prefixes
  policy_type: DSL
  author: system
  publisher: system
  status: Published
  policy_dsl: |-
    allow if {
      permitted_actions := [
        "SelectFromColumns",
        "InsertIntoTable",
        "CreateTable",
        "ShowCreateTable",
        "DropTable",
        "UpdateTableColumns",
        "DeleteFromTable"
        ]

      required_principal_attributes := [
        {
          "key": "ad_group",
          "value": "DEVELOPERS"
        }
      ]

      # everything in sales schema with prefix of v_ or u_
      permitted_object_regexes := [
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "v_.*"
        },
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "u_.*"
        }
      ]

      input.action.operation in permitted_actions
      principal_has_all_required_attributes(required_principal_attributes)

      # TODO check the props the user is using

      # check the input object matches a regex
      some permitted_object_regex in permitted_object_regexes
      regex.match(permitted_object_regex.database, input_table.database)
      regex.match(permitted_object_regex.schema, input_table.schema)
      regex.match(permitted_object_regex.table, input_table.table)

    }

    allow if {
      permitted_actions := ["FilterSchemas"]

      required_principal_attributes := [
        {
          "key": "ad_group",
          "value": "DEVELOPERS"
        }
      ]

      # everything in sales schema with prefix of v_ or u_
      permitted_object_regexes := [
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "v_.*"
        },
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "u_.*"
        }
      ]

      input.action.operation in permitted_actions
      principal_has_all_required_attributes(required_principal_attributes)

      some permitted_object_regex in permitted_object_regexes
      regex.match(permitted_object_regex.database, input.action.resource.schema.catalogName)
      regex.match(permitted_object_regex.schema, input.action.resource.schema.schemaName)
    }


    allow if {
      permitted_actions := ["FilterCatalogs", "AccessCatalog"]

      required_principal_attributes := [
        {
          "key": "ad_group",
          "value": "DEVELOPERS"
        }
      ]

      # everything in sales schema with prefix of v_ or u_
      permitted_object_regexes := [
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "v_.*"
        },
        {
          "database": "iceberg",
          "schema": "workspace",
          "table": "u_.*"
        }
      ]

      input.action.operation in permitted_actions
      principal_has_all_required_attributes(required_principal_attributes)

      some permitted_object_regex in permitted_object_regexes
      regex.match(permitted_object_regex.database, input.action.resource.catalog.name)
    }
