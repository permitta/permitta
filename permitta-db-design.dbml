// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

//////////// Ingestion /////////////

// this we want to be able to purge, so no keys pointing to it
Table ingestion_jobs {
  ingestion_job_process_id integer [primary key]
  data_source_id integer
  records_retrieved integer
  records_ingested integer
  records_updated integer
  records_deactivated integer
}

// table per type? does this need to be in DB?
Table data_sources {
  data_source_id integer [primary key]
  type varchar                // (OMD, trino, LDAP)
  connection_config json      // per source type config
}

Ref: ingestion_jobs.data_source_id > data_sources.data_source_id

//////////// Principals /////////////

Table principals {
  principal_id integer [primary key]
  // meta
  ingestion_job_process_id integer
  data_source_id integer
  activated_at datetime
  deactivated_at datetime
}

Table principal_attributes {
  principal_attribute_id integer
  principal_id integer
  attribute_key varchar
  attribute_value varchar
  // meta
  ingestion_job_process_id integer
  data_source_id integer
  activated_at datetime
  deactivated_at datetime
}

Ref: principal_attributes.principal_id > principals.principal_id

//////////// Groups /////////////

Table groups {
  group_id integer [primary key]
  // meta
  ingestion_job_process_id integer
  data_source_id integer
  activated_at datetime
  deactivated_at datetime
}

Table group_principal_maps {
  group_principal_map_id integer [primary key]
  group_id integer
  principal_id integer
}

Table group_attributes {
  group_attribute_id integer
  group_id integer
  attribute_key varchar
  attribute_value varchar
  // meta
  ingestion_job_process_id integer
  data_source_id integer
  activated_at datetime
  deactivated_at datetime
}

Ref: groups.group_id > group_principal_maps.group_id
Ref: principals.principal_id > group_principal_maps.principal_id
Ref: group_attributes.group_id > groups.group_id


//////////// Platforms /////////////

// need a better name here - this is SB etc
Table platforms {
  platform_id integer [primary key]
  platform_display_name varchar
}

// config specific to trino/SB
Table platform_trinos {
  platform_trinos_id integer [primary key]
  platform_id integer
  host varchar
  port varchar
  auth_type integer   // basic / OIDC
  username varchar
}

Ref: platform_trinos.platform_id > platforms.platform_id

//////////// Data objects /////////////

Table data_object_relational_tables {
  data_object_relational_table_id integer [primary key]
  platform_id integer
  database_name varchar       // catalog in trino
  schema_name varchar
  table_name varchar
}

Table data_object_relational_table_columns {
  data_object_relational_table_column_id integer [primary key]
  data_object_relational_table_id integer
  column_name varchar
}

Ref: data_object_relational_tables.platform_id > platforms.platform_id
Ref: data_object_relational_table_columns.data_object_relational_table_id > data_object_relational_tables.data_object_relational_table_id


//////////// Data attributes /////////////

// should this be 2 tables?
Table data_object_attributes {
  data_object_attribute_id integer [primary key]
  data_object_relational_table_id integer
  data_object_relational_table_column_id integer
  attribute_key varchar
  attribute_value varchar
  // meta
  ingestion_job_process_id integer
  data_source_id integer
  activated_at datetime
  deactivated_at datetime
}

Ref: data_object_attributes.data_object_relational_table_id > data_object_relational_tables.data_object_relational_table_id
Ref: data_object_attributes.data_object_relational_table_column_id > data_object_relational_table_columns.data_object_relational_table_column_id

//////////// History Tables /////////////

// no pk
Table principals_history {
  // history fields
  change_datetime datetime
  change_prinicpal varchar
  change_type integer // I, U, D
}

// no pk
Table principal_attributes_history {
  // history fields
  change_datetime datetime
  change_prinicpal varchar
  change_type integer // I, U, D
}


