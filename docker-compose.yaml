x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  opa:
    image: openpolicyagent/opa:latest-static
    ports:
      - 8181:8181
    command:
      - "run"
      - "--server"
      - "--watch"
      - "--log-level=debug"
      - "--log-format=json-pretty"
#      - "--set=decision_logs.console=true"
      - "-c"
      - "/policy/config.yaml"
      - "/policy/"
    volumes:
      - ./docker/opa/policy:/policy

  lldap:
    image: lldap/lldap:stable
    ports:
      # For LDAP, not recommended to expose, see Usage section.
      - "3890:3890"
      # For LDAPS (LDAP Over SSL), enable port if LLDAP_LDAPS_OPTIONS__ENABLED set true, look env below
      #- "6360:6360"
      # For the web front-end
      - "17170:17170"
    volumes:
      # Alternatively, you can mount a local folder
     - ./instance/lldap:/data
     - ./lldap/bootstrap:/bootstrap
    environment:
      - UID=1000
      - GID=1000
      - TZ=Australia/Melbourne
      - LLDAP_JWT_SECRET=jhgfdfjkhgsdfghlushdvndkfjnsd
      - LLDAP_KEY_SEED=ioajerjgosdfvnsdufghbsiudhgjfdvn
      - LLDAP_LDAP_BASE_DN=dc=example,dc=com

      # envs required for lldap
      - LLDAP_LDAP_USER_EMAIL=admin@example.com
      - LLDAP_LDAP_USER_PASS=changeme

      # envs required for bootstrap.sh
      - LLDAP_URL=http://localhost:17170
      - LLDAP_ADMIN_USERNAME=admin
      - LLDAP_ADMIN_PASSWORD=changeme # same as LLDAP_LDAP_USER_PASS
      - USER_CONFIGS_DIR=/bootstrap/user-configs
      - GROUP_CONFIGS_DIR=/bootstrap/group-configs
      - DO_CLEANUP=true

  postgres:
    image: postgres:16.2
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    logging: *logging
    volumes:
      - ./docker/postgres/postgres_init_script.sh:/docker-entrypoint-initdb.d/postgres_init_script.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 10s
      timeout: 5s
      retries: 10

  keycloak:
    image: keycloak/keycloak:latest
    ports:
      - 8080:8080
    command: [ "start-dev", "--import-realm" ]
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: "INFO"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./docker/keycloak/permitta_realm.json:/opt/keycloak/data/import/realm.json:ro
    logging: *logging
    depends_on:
      postgres:
        condition: service_healthy


  trino:
    ports:
      - "8081:8080"
    image: "trinodb/trino:448"
    volumes:
      - ./docker/trino/etc:/etc/trino
      - ./docker/trino/catalog:/etc/trino/catalog

  hive-metastore:
    hostname: hive-metastore
    image: 'starburstdata/hive:3.1.3-e.9-arm64'
    ports:
      - '9083:9083' # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgres:5432/hive_db
      HIVE_METASTORE_USER: hive_user
      HIVE_METASTORE_PASSWORD: hive_password
      HIVE_METASTORE_WAREHOUSE_DIR: s3://datalake/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started

  minio:
    hostname: minio
    image: 'minio/minio:RELEASE.2022-05-26T05-48-41Z'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data --console-address ":9001"

  # This job will create the "datalake" bucket on Minio
  mc-job:
    image: 'minio/mc:RELEASE.2022-05-09T04-08-26Z'
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config --quiet host add myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb --quiet myminio/datalake
      "
    depends_on:
      - minio

